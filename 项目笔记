Day01:
    主要是搭建后端开发环境以及git的配置，了解swagger的作用以及注解的使用

Day02:
    员工管理以及分类管理的实现
        包括：
            1.新增员工
                a.使用常量类来对类似与账号状态、默认密码等常量进行管理，便于后期维护
                b.流程：通过employeeDTO封装数据，然后将数据传给employeeService，
                       再到employeeServiceImpl类中将employeeDTO中存在的属性拷贝给employee对象，
                       将employee中其他的属性进行设置，最后调用employeeMapper中的inset语句来将其插入到数据库里。
                c.逻辑：前端传来的json格式的数据 -> controller层 -> 赋值给DTO对象 -> 保存到service层中 -> 在serviceImpl中将数据赋值给employee对象
                       未赋值的属性进行手动设置 -> mapper层使用@insert()注解写sql语句将数据写入到数据库中
                d.功能测试：通过接口文档测试(主要)
                          通过前后端联调测试
                e.代码完善： 1).录入的用户名已存在，抛出异常后没有处理 -> 获取SQL异常信息 -> 返回信息提示
                           2).新增员工时，创建人id和修改人id设置为了固定值 -> 从token中获取当前登录员工id -> 使用ThreadLocal将id传到service中(重要技术点)

            2.员工分页查询
            3.启用禁用员工账号
            4.编辑员工
            5.导入分类模块功能代码(已经给了现成代码)

Day03:
    1.公共字段自动填充 (公共字段指的是不同表中的相同列名)
        通过定义注解和切面编程统一处理公共字段赋值
            a.自定义注解AutoFill,用于标识需要进行公共字段自动填充的方法
            b.自定义切面类AutoFillAspect,统一拦截加入了AutoFill注解的方法,通过反射为公共字段赋值
            c.在Mapper的方法上加入AutoFill注解
            技术点：枚举、注解、AOP、反射

            公共字段由切片类统一赋值,不需要在service实现类中手动赋值了
            核心思想：自定义注解@AutoFill用于标识哪些方法需要进行公共字段自动填充 ——> 自定义切面类AutoFillAspect,统一拦截加入了AutoFill注解的方法
                     ——> 在自定义的切面类AutoFillAspect中通过反射为公共字段赋值 ——> 在Mapper的方法上加入AutoFill注解用于标识 (标识之后对应的serviceImpl中的赋值代码可以注释掉了)

    2.新增菜品
        业务规则：
            a.菜品名称必须是唯一的
            b.菜品必须属于某个分类下，不能单独存在
            c.新增菜品时可以根据情况选择菜品的口味
            d.每个菜品必须对应一张图片
        使用阿里云oss来存储菜品图片
        在application.yml中加入如下配置
          alioss:
            endpoint: ${sky.alioss.endpoint}
            access-key-id: ${sky.alioss.access-key-id}
            access-key-secret: ${sky.alioss.access-key-secret}
            bucket-name: ${sky.alioss.bucket-name}
          注意：endpoint 和 bucket-name中的横杠和.(找了半个多小时 FK all ！！！)
          github会阻止带有密钥的文件上传，如果一定要上传，打开控制台，依次点击所给的两个链接，选择第一个选项
          选择之后可以上传了，但是阿里云会发短信提醒还会有一些其他的阻止措施，所以最好上传的时候将密钥删除再push
    3.菜品分页查询
    4.删除菜品
    5.修改菜品


    由于对菜品进行新增、修改、删除、起售、停售等操作时，由于操作的是数据库，需要对redis的缓存进行清除，保证数据库和redis的一致性
    业务需要操作哪张表，就在serviceImpl中注入哪张表的Mapper


    缓存套餐实现思路：
        1.导入SpringCache和Redis相关maven坐标
        2.在启动类上加入@EnableCaching注解，开启缓存功能
        3.在用户端接口SetmealController的list方法上加入@Cacheable注解
        4.在管理端接口SetmealController的save、delete、update、startOrStop等方法上加入CacheEvict注解


